import org.w3c.dom.Document
import org.w3c.dom.NodeList

import javax.xml.parsers.DocumentBuilderFactory

buildscript {
    apply from: 'https://moddingx.github.io/ModUtils/v5/buildscript.gradle', to: buildscript
}

apply from: 'https://moddingx.github.io/ModUtils/v5/mod.gradle'
apply plugin: 'org.moddingx.modgradle.cursedep'
apply plugin: 'maven-publish'
mod['version'] = getVersion(mod.minecraft + "-" + mod.base_version, new URL(mod.remote_maven + "/" + group.replace('.', '/') + "/" + name + "/maven-metadata.xml"))
project.version = mod.version

repositories {
    maven {
        name = "JEI"
        url = "https://modmaven.dev/"
    }
    maven {
        name = "MelanX Maven"
        url = mod.remote_maven
    }
    maven {
        name = "Curios"
        url = "https://maven.theillusivec4.top/"
    }
}

dependencies {
    annotationProcessor "org.moddingx:LibX:1.19.2-4.2.6"

    implementation fg.deobf("org.moddingx:LibX:1.19.2-4.2.6")
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:1.19.2-5.1.1.0")
    compileOnly fg.deobf("io.github.noeppi_noeppi.mods:MineMention:1.19.1-2.1.0")

    runtimeOnly fg.deobf("mezz.jei:jei-1.19.1-forge:11.2.0.241")

//    runtimeOnly curse.mod(556904, 4016840) # Cosmopolis Mod 1.19.X-12.0
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version
            artifact(jar) {
                builtBy project.provider { project.tasks.named('reobfJar') }
            }
            if (mod.sources) {
                artifact(sourceJar)
            }
            pom {
                licenses {
                    license {
                        name = mod.license
                        url = mod.license_url.toString()
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url mod.remote_maven
            credentials(PasswordCredentials)
        }
    }
}
publish.dependsOn('reobfJar')

private static String getVersion(String baseVersion, URL url) {
    try {
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");

        Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(connection.getInputStream());
        NodeList versionNodes = doc.getElementsByTagName("version");

        String latestVersion = null;
        for (int i = 0; i < versionNodes.getLength(); i++) {
            String version = versionNodes.item(i).getTextContent();
            if (version.startsWith(baseVersion)) {
                latestVersion = version;
            }
        }

        if (latestVersion == null) {
            return baseVersion + ".0";
        }

        return baseVersion + "." + (Integer.parseInt(latestVersion.substring(latestVersion.lastIndexOf('.') + 1)) + 1);
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}
